@using ViewModel.Customers
@model CustomerViewModel
@{ Layout = null;
    string message = ViewBag.Message;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Login Form</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-4">
                <div>
                    <form action="/Customer/Register" method="post">
                        <h3 style="margin-top: 3em; text-align:center">Đăng ký</h3>
                        @*<div class="danger text-danger">
                                @Html.ValidationSummary()
                            </div>*@

                        <input type="hidden" name="returnUrl" value="@ViewBag.returnUrl" />
                        @if (!string.IsNullOrEmpty(message))
                        {
                        <div class="alert alert-danger">@message</div>
                        }
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-user"></span>
                                @*@Html.LabelFor(x => x.UserName, new { @class = "form-label" })*@
                                @Html.TextBoxFor(x => x.UserName, new { @class = "form-control", @placeholder = "Username", @pattern = "[A-Za-z0-9]+", @oninvalid = "this.setCustomValidity('Username viết liền không dấu')", @oninput = "this.setCustomValidity('')" })
                            </div>
                            @Html.ValidationMessageFor(x => x.UserName, null, new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-lock"></span>
                                @*@Html.LabelFor(x => x.Password, new { @class = "form-label" })*@
                                @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @placeholder = "Password", @type = "password" })
                            </div>
                            @Html.ValidationMessageFor(x => x.Password, null, new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-lock"></span>
                                @*@Html.LabelFor(x => x.UserName, new { @class = "form-label" })*@
                                @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control", @placeholder = "Tên khách hàng" })
                            </div>
                            @Html.ValidationMessageFor(x => x.CustomerName, null, new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-lock"></span>
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.RadioButtonFor(model => model.Gender, false, new { @checked = "checked" }) Nam
                                @Html.RadioButtonFor(model => model.Gender, true) Nữ
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-lock"></span>
                                @*@Html.LabelFor(x => x.Email, new { @class = "form-label" })*@
                                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "Email", @type="email", @oninvalid = "this.setCustomValidity('Email có định dạng name@gmail.com')", @oninput = "this.setCustomValidity('')" })
                            </div>
                            @Html.ValidationMessageFor(x => x.Email, null, new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <div class="form-holder ">
                                <span class="lnr lnr-lock"></span>
                                @*@Html.LabelFor(x => x.Phone, new { @class = "form-label" })*@
                                @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", @placeholder = "Số điện thoại", @pattern = "[0][0-9]{9}", @oninvalid="this.setCustomValidity('Nhập sai định dạng số điện thoại')", @oninput="this.setCustomValidity('')" })
                            </div>
                            @Html.ValidationMessageFor(x => x.Phone, null, new { @class = "text-danger" })
                        </div>
                        <button type="submit" class="btn btn-success w-100 mb-3">
                            <span>Đăng ký</span>
                        </button>
                        <div>
                            <p style="text-align:center">Bạn đã có tài khoản? <a href="@Url.Action("Login","Customer")">Đăng nhập</a> ngay!</p>
                            <p style="text-align:center">Quay lại <a href="/">trang chủ</a>.</p>
                        </div>
                    </form>
                </div>
            </div>
            <div class="col-8">
                @*<img src="~/Assets/images/sunrise-nha-trang-beach-hotel-spa-241.jpeg" />*@
                <img src="~/Assets/images/161520565.jpg" width="1010" height="753" />
            </div>
        </div>
    </div>
</body>
</html>